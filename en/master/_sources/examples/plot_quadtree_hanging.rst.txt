.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_quadtree_hanging.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_plot_quadtree_hanging.py:


QuadTree: Hanging Nodes
=======================

You can give the refine method a function, which is evaluated on every
cell of the TreeMesh.

Occasionally it is useful to initially refine to a constant level
(e.g. 3 in this 32x32 mesh). This means the function is first evaluated
on an 8x8 mesh (2^3).



.. image:: /examples/images/sphx_glr_plot_quadtree_hanging_001.png
    :alt: plot quadtree hanging
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/travis/build/simpeg/discretize/examples/plot_quadtree_hanging.py:41: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      plt.show()






|


.. code-block:: default

    import discretize
    import matplotlib.pyplot as plt


    def run(plotIt=True):
        M = discretize.TreeMesh([8, 8])

        def refine(cell):
            xyz = cell.center
            dist = ((xyz - [0.25, 0.25])**2).sum()**0.5
            if dist < 0.25:
                return 3
            return 2

        M.refine(refine)
        if plotIt:
            M.plotGrid(nodes=True, centers=True, faces_x=True)
            plt.legend((
                'Grid',
                'Cell Centers',
                'Nodes',
                'Hanging Nodes',
                'X faces',
                'Hanging X faces'
            ))

    if __name__ == '__main__':
        run()
        plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.151 seconds)


.. _sphx_glr_download_examples_plot_quadtree_hanging.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_quadtree_hanging.py <plot_quadtree_hanging.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_quadtree_hanging.ipynb <plot_quadtree_hanging.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
